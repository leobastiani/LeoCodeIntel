{
	"scope": "source.python",

	"completions":
	[
		{ "trigger": "__import__\tglobals=None, locals=None, fromlist=(), level=0", "contents": "__import__()" },
		{ "trigger": "abs\tabs", "contents": "abs(${1:x})" },
		{ "trigger": "all\tall", "contents": "all(${1:iterable})" },
		{ "trigger": "any\tany", "contents": "any(${1:iterable})" },
		{ "trigger": "ascii\tascii", "contents": "ascii(${1:object})" },
		{ "trigger": "bin\tbin", "contents": "bin(${1:x})" },
		{ "trigger": "callable\tcallable", "contents": "callable(${1:object})" },
		{ "trigger": "chr\tchr", "contents": "chr(${1:i})" },
		{ "trigger": "compile\tflags=0, dont_inherit=False, optimize=-1", "contents": "compile(${1:source}, ${2:filename}, ${3:mode})" },
		{ "trigger": "delattr\tdelattr", "contents": "delattr(${1:object}, ${2:name})" },
		{ "trigger": "dir\tdir", "contents": "dir(${1:x})" },
		{ "trigger": "divmod\tdivmod", "contents": "divmod(${1:a}, ${2:b})" },
		{ "trigger": "enumerate\tstart=0", "contents": "enumerate(${1:iterable})" },
		{ "trigger": "eval\tglobals=None, locals=None", "contents": "eval(${1:expression})" },
		{ "trigger": "exec\texec", "contents": "exec(${1:object})" },
		{ "trigger": "exit\texit", "contents": "sys.exit(0)" },
		{ "trigger": "filter\tfilter", "contents": "filter(${1:function}, ${2:iterable})" },
		{ "trigger": "float\tfloat", "contents": "float(${1:x})" },
		{ "trigger": "format\tformat", "contents": "format(${1:value})" },
		{ "trigger": "getattr\tgetattr", "contents": "getattr(${1:object}, ${2:name})" },
		{ "trigger": "globals\tglobals", "contents": "globals()" },
		{ "trigger": "hasattr\thasattr", "contents": "hasattr(${1:object}, ${2:name})" },
		{ "trigger": "hash\thash", "contents": "hash(${1:object})" },
		{ "trigger": "help\thelp", "contents": "help(${1:x})" },
		{ "trigger": "hex\thex", "contents": "hex(${1:x})" },
		{ "trigger": "id\tid", "contents": "id(${1:object})" },
		{ "trigger": "input\tinput", "contents": "input()" },
		{ "trigger": "int\tint", "contents": "int(${1:x})" },
		{ "trigger": "isinstance\tisinstance", "contents": "isinstance(${1:object}, ${2:classinfo})" },
		{ "trigger": "issubclass\tissubclass", "contents": "issubclass(${1:class}, ${2:classinfo})" },
		{ "trigger": "iter\titer", "contents": "iter(${1:object})" },
		{ "trigger": "len\tlen", "contents": "len(${1:s})" },
		{ "trigger": "list\tlist", "contents": "list(${1:x})" },
		{ "trigger": "map\tmap", "contents": "map(${1:function}, ${2:iterable}, ${3:...})" },
		{ "trigger": "max\tmax", "contents": "max(${1:arg1}, ${2:arg2}, ${3:*args})" },
		{ "trigger": "max\tmax", "contents": "max(${1:iterable})" },
		{ "trigger": "memoryview\tmemoryview", "contents": "memoryview(${1:obj})" },
		{ "trigger": "min\tmin", "contents": "min(${1:arg1}, ${2:arg2}, ${3:*args})" },
		{ "trigger": "min\tmin", "contents": "min(${1:iterable})" },
		{ "trigger": "next\tnext", "contents": "next(${1:iterator})" },
		{ "trigger": "oct\toct", "contents": "oct(${1:x})" },
		{ "trigger": "open\tmode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None", "contents": "open(${1:file})" },
		{ "trigger": "ord\tord", "contents": "ord(${1:c})" },
		{ "trigger": "pow\tpow", "contents": "pow(${1:x}, ${2:y})" },
		{ "trigger": "range\trange", "contents": "range(${1:start}, ${2:stop})" },
		{ "trigger": "range\trange", "contents": "range(${1:stop})" },
		{ "trigger": "repr\trepr", "contents": "repr(${1:object})" },
		{ "trigger": "reversed\treversed", "contents": "reversed(${1:seq})" },
		{ "trigger": "round\tround", "contents": "round(${1:number})" },
		{ "trigger": "set\tset", "contents": "set(${1:x})" },
		{ "trigger": "setattr\tsetattr", "contents": "setattr(${1:object}, ${2:name}, ${3:value})" },
		{ "trigger": "sorted\tsorted", "contents": "sorted(${1:iterable})" },
		{ "trigger": "staticmethod\tstaticmethod", "contents": "staticmethod(${1:function})" },
		{ "trigger": "str\tstr", "contents": "str(${1:x})" },
		{ "trigger": "sum\tsum", "contents": "sum(${1:iterable})" },
		{ "trigger": "super\tsuper", "contents": "super()" },
		{ "trigger": "tuple\ttuple", "contents": "tuple(${1:x})" },
		{ "trigger": "zip\tzip", "contents": "zip(${1:*iterables})" },
		{ "trigger": "write\twrite", "contents": "write(${1:str})" },
		{ "trigger": "read\tread", "contents": "read()" },
		{ "trigger": "readlines\treadlines", "contents": "readlines()" },
		{ "trigger": "Path\tPath", "contents": "Path(${1:path})" },
		{ "trigger": "os.ctermid\tos.ctermid", "contents": "os.ctermid()" },
		{ "trigger": "os.chdir\tos.chdir", "contents": "os.chdir(${1:path})" },
		{ "trigger": "os.fchdir\tos.fchdir", "contents": "os.fchdir(${1:fd})" },
		{ "trigger": "os.getcwd\tos.getcwd", "contents": "os.getcwd()" },
		{ "trigger": "os.fsencode\tos.fsencode", "contents": "os.fsencode(${1:filename})" },
		{ "trigger": "os.fsdecode\tos.fsdecode", "contents": "os.fsdecode(${1:filename})" },
		{ "trigger": "os.getenv\tos.getenv", "contents": "os.getenv(${1:key}${2:, ${3:default=${4:None}}})" },
		{ "trigger": "os.getenvb\tos.getenvb", "contents": "os.getenvb(${1:key}${2:, ${3:default=${4:None}}})" },
		{ "trigger": "os.get_exec_path\tos.get_exec_path", "contents": "os.get_exec_path(${1:${2:env=${3:None}}})" },
		{ "trigger": "os.getegid\tos.getegid", "contents": "os.getegid()" },
		{ "trigger": "os.geteuid\tos.geteuid", "contents": "os.geteuid()" },
		{ "trigger": "os.getgid\tos.getgid", "contents": "os.getgid()" },
		{ "trigger": "os.getgrouplist\tos.getgrouplist", "contents": "os.getgrouplist(${1:user}, ${2:group})" },
		{ "trigger": "os.getgroups\tos.getgroups", "contents": "os.getgroups()" },
		{ "trigger": "os.getlogin\tos.getlogin", "contents": "os.getlogin()" },
		{ "trigger": "os.getpgid\tos.getpgid", "contents": "os.getpgid(${1:pid})" },
		{ "trigger": "os.getpgrp\tos.getpgrp", "contents": "os.getpgrp()" },
		{ "trigger": "os.getpid\tos.getpid", "contents": "os.getpid()" },
		{ "trigger": "os.getppid\tos.getppid", "contents": "os.getppid()" },
		{ "trigger": "os.getpriority\tos.getpriority", "contents": "os.getpriority(${1:which}, ${2:who})" },
		{ "trigger": "os.getresuid\tos.getresuid", "contents": "os.getresuid()" },
		{ "trigger": "os.getresgid\tos.getresgid", "contents": "os.getresgid()" },
		{ "trigger": "os.getuid\tos.getuid", "contents": "os.getuid()" },
		{ "trigger": "os.initgroups\tos.initgroups", "contents": "os.initgroups(${1:username}, ${2:gid})" },
		{ "trigger": "os.putenv\tos.putenv", "contents": "os.putenv(${1:key}, ${2:value})" },
		{ "trigger": "os.setegid\tos.setegid", "contents": "os.setegid(${1:egid})" },
		{ "trigger": "os.seteuid\tos.seteuid", "contents": "os.seteuid(${1:euid})" },
		{ "trigger": "os.setgid\tos.setgid", "contents": "os.setgid(${1:gid})" },
		{ "trigger": "os.setgroups\tos.setgroups", "contents": "os.setgroups(${1:groups})" },
		{ "trigger": "os.setpgrp\tos.setpgrp", "contents": "os.setpgrp()" },
		{ "trigger": "os.setpgid\tos.setpgid", "contents": "os.setpgid(${1:pid}, ${2:pgrp})" },
		{ "trigger": "os.setpriority\tos.setpriority", "contents": "os.setpriority(${1:which}, ${2:who}, ${3:priority})" },
		{ "trigger": "os.setregid\tos.setregid", "contents": "os.setregid(${1:rgid}, ${2:egid})" },
		{ "trigger": "os.setresgid\tos.setresgid", "contents": "os.setresgid(${1:rgid}, ${2:egid}, ${3:sgid})" },
		{ "trigger": "os.setresuid\tos.setresuid", "contents": "os.setresuid(${1:ruid}, ${2:euid}, ${3:suid})" },
		{ "trigger": "os.setreuid\tos.setreuid", "contents": "os.setreuid(${1:ruid}, ${2:euid})" },
		{ "trigger": "os.getsid\tos.getsid", "contents": "os.getsid(${1:pid})" },
		{ "trigger": "os.setsid\tos.setsid", "contents": "os.setsid()" },
		{ "trigger": "os.setuid\tos.setuid", "contents": "os.setuid(${1:uid})" },
		{ "trigger": "os.strerror\tos.strerror", "contents": "os.strerror(${1:code})" },
		{ "trigger": "os.umask\tos.umask", "contents": "os.umask(${1:mask})" },
		{ "trigger": "os.uname\tos.uname", "contents": "os.uname()" },
		{ "trigger": "os.unsetenv\tos.unsetenv", "contents": "os.unsetenv(${1:key})" },
		{ "trigger": "os.fdopen\tos.fdopen", "contents": "os.fdopen(${1:fd}, ${2:*args}, ${3:**kwargs})" },
		{ "trigger": "os.close\tos.close", "contents": "os.close(${1:fd})" },
		{ "trigger": "os.closerange\tos.closerange", "contents": "os.closerange(${1:fd_low}, ${2:fd_high})" },
		{ "trigger": "os.device_encoding\tos.device_encoding", "contents": "os.device_encoding(${1:fd})" },
		{ "trigger": "os.dup\tos.dup", "contents": "os.dup(${1:fd})" },
		{ "trigger": "os.dup2\tos.dup2", "contents": "os.dup2(${1:fd}, ${2:fd2}${3:, ${4:inheritable=${5:True}}})" },
		{ "trigger": "os.fchmod\tos.fchmod", "contents": "os.fchmod(${1:fd}, ${2:mode})" },
		{ "trigger": "os.fchown\tos.fchown", "contents": "os.fchown(${1:fd}, ${2:uid}, ${3:gid})" },
		{ "trigger": "os.fdatasync\tos.fdatasync", "contents": "os.fdatasync(${1:fd})" },
		{ "trigger": "os.fpathconf\tos.fpathconf", "contents": "os.fpathconf(${1:fd}, ${2:name})" },
		{ "trigger": "os.fstat\tos.fstat", "contents": "os.fstat(${1:fd})" },
		{ "trigger": "os.fstatvfs\tos.fstatvfs", "contents": "os.fstatvfs(${1:fd})" },
		{ "trigger": "os.fsync\tos.fsync", "contents": "os.fsync(${1:fd})" },
		{ "trigger": "os.ftruncate\tos.ftruncate", "contents": "os.ftruncate(${1:fd}, ${2:length})" },
		{ "trigger": "os.get_blocking\tos.get_blocking", "contents": "os.get_blocking(${1:fd})" },
		{ "trigger": "os.isatty\tos.isatty", "contents": "os.isatty(${1:fd})" },
		{ "trigger": "os.lockf\tos.lockf", "contents": "os.lockf(${1:fd}, ${2:cmd}, ${3:len})" },
		{ "trigger": "os.lseek\tos.lseek", "contents": "os.lseek(${1:fd}, ${2:pos}, ${3:how})" },
		{ "trigger": "os.open\tos.open", "contents": "os.open(${1:path}, ${2:flags}${3:, ${4:mode=${5:0o777}}, ${6:dir_fd=${7:None}}})" },
		{ "trigger": "os.openpty\tos.openpty", "contents": "os.openpty()" },
		{ "trigger": "os.pipe\tos.pipe", "contents": "os.pipe()" },
		{ "trigger": "os.pipe2\tos.pipe2", "contents": "os.pipe2(${1:flags})" },
		{ "trigger": "os.posix_fallocate\tos.posix_fallocate", "contents": "os.posix_fallocate(${1:fd}, ${2:offset}, ${3:len})" },
		{ "trigger": "os.posix_fadvise\tos.posix_fadvise", "contents": "os.posix_fadvise(${1:fd}, ${2:offset}, ${3:len}, ${4:advice})" },
		{ "trigger": "os.pread\tos.pread", "contents": "os.pread(${1:fd}, ${2:buffersize}, ${3:offset})" },
		{ "trigger": "os.pwrite\tos.pwrite", "contents": "os.pwrite(${1:fd}, ${2:str}, ${3:offset})" },
		{ "trigger": "os.read\tos.read", "contents": "os.read(${1:fd}, ${2:n})" },
		{ "trigger": "os.sendfile\tos.sendfile", "contents": "os.sendfile(${1:out}, ${2:in}, ${3:offset}, ${4:count})" },
		{ "trigger": "os.set_blocking\tos.set_blocking", "contents": "os.set_blocking(${1:fd}, ${2:blocking})" },
		{ "trigger": "os.readv\tos.readv", "contents": "os.readv(${1:fd}, ${2:buffers})" },
		{ "trigger": "os.tcgetpgrp\tos.tcgetpgrp", "contents": "os.tcgetpgrp(${1:fd})" },
		{ "trigger": "os.tcsetpgrp\tos.tcsetpgrp", "contents": "os.tcsetpgrp(${1:fd}, ${2:pg})" },
		{ "trigger": "os.ttyname\tos.ttyname", "contents": "os.ttyname(${1:fd})" },
		{ "trigger": "os.write\tos.write", "contents": "os.write(${1:fd}, ${2:str})" },
		{ "trigger": "os.writev\tos.writev", "contents": "os.writev(${1:fd}, ${2:buffers})" },
		{ "trigger": "os.get_terminal_size\tos.get_terminal_size", "contents": "os.get_terminal_size(${1:${2:fd=${3:STDOUT_FILENO}}})" },
		{ "trigger": "os.get_inheritable\tos.get_inheritable", "contents": "os.get_inheritable(${1:fd})" },
		{ "trigger": "os.set_inheritable\tos.set_inheritable", "contents": "os.set_inheritable(${1:fd}, ${2:inheritable})" },
		{ "trigger": "os.get_handle_inheritable\tos.get_handle_inheritable", "contents": "os.get_handle_inheritable(${1:handle})" },
		{ "trigger": "os.set_handle_inheritable\tos.set_handle_inheritable", "contents": "os.set_handle_inheritable(${1:handle}, ${2:inheritable})" },
		{ "trigger": "os.access\tos.access", "contents": "os.access(${1:path}, ${2:mode}${3:, ${4:dir_fd=${5:None}}, ${6:effective_ids=${7:False}}, ${8:follow_symlinks=${9:True}}})" },
		{ "trigger": "os.chdir\tos.chdir", "contents": "os.chdir(${1:path})" },
		{ "trigger": "os.chflags\tos.chflags", "contents": "os.chflags(${1:path}, ${2:flags}${3:, ${4:follow_symlinks=${5:True}}})" },
		{ "trigger": "os.chmod\tos.chmod", "contents": "os.chmod(${1:path}, ${2:mode}${3:, ${4:dir_fd=${5:None}}, ${6:follow_symlinks=${7:True}}})" },
		{ "trigger": "os.chown\tos.chown", "contents": "os.chown(${1:path}, ${2:uid}, ${3:gid}${4:, ${5:dir_fd=${6:None}}, ${7:follow_symlinks=${8:True}}})" },
		{ "trigger": "os.chroot\tos.chroot", "contents": "os.chroot(${1:path})" },
		{ "trigger": "os.fchdir\tos.fchdir", "contents": "os.fchdir(${1:fd})" },
		{ "trigger": "os.getcwd\tos.getcwd", "contents": "os.getcwd()" },
		{ "trigger": "os.getcwdb\tos.getcwdb", "contents": "os.getcwdb()" },
		{ "trigger": "os.lchflags\tos.lchflags", "contents": "os.lchflags(${1:path}, ${2:flags})" },
		{ "trigger": "os.lchmod\tos.lchmod", "contents": "os.lchmod(${1:path}, ${2:mode})" },
		{ "trigger": "os.lchown\tos.lchown", "contents": "os.lchown(${1:path}, ${2:uid}, ${3:gid})" },
		{ "trigger": "os.link\tos.link", "contents": "os.link(${1:src}, ${2:dst}${3:, ${4:src_dir_fd=${5:None}}, ${6:dst_dir_fd=${7:None}}, ${8:follow_symlinks=${9:True}}})" },
		{ "trigger": "os.listdir\tos.listdir", "contents": "os.listdir(${1:${2:path=${3:'.'}}})" },
		{ "trigger": "os.lstat\tos.lstat", "contents": "os.lstat(${1:path}${2:, ${3:dir_fd=${4:None}}})" },
		{ "trigger": "os.mkdir\tos.mkdir", "contents": "os.mkdir(${1:path}${2:, ${3:mode=${4:0o777}}, ${5:dir_fd=${6:None}}})" },
		{ "trigger": "os.makedirs\tos.makedirs", "contents": "os.makedirs(${1:name}${2:, ${3:mode=${4:0o777}}, ${5:exist_ok=${6:False}}})" },
		{ "trigger": "os.mkfifo\tos.mkfifo", "contents": "os.mkfifo(${1:path}${2:, ${3:mode=${4:0o666}}, ${5:dir_fd=${6:None}}})" },
		{ "trigger": "os.mknod\tos.mknod", "contents": "os.mknod(${1:path}${2:, ${3:mode=${4:0o600}}, ${5:device=${6:0}}, ${7:dir_fd=${8:None}}})" },
		{ "trigger": "os.major\tos.major", "contents": "os.major(${1:device})" },
		{ "trigger": "os.minor\tos.minor", "contents": "os.minor(${1:device})" },
		{ "trigger": "os.makedev\tos.makedev", "contents": "os.makedev(${1:major}, ${2:minor})" },
		{ "trigger": "os.pathconf\tos.pathconf", "contents": "os.pathconf(${1:path}, ${2:name})" },
		{ "trigger": "os.readlink\tos.readlink", "contents": "os.readlink(${1:path}${2:, ${3:dir_fd=${4:None}}})" },
		{ "trigger": "os.remove\tos.remove", "contents": "os.remove(${1:path}${2:, ${3:dir_fd=${4:None}}})" },
		{ "trigger": "os.removedirs\tos.removedirs", "contents": "os.removedirs(${1:name})" },
		{ "trigger": "os.rename\tos.rename", "contents": "os.rename(${1:src}, ${2:dst}${3:, ${4:src_dir_fd=${5:None}}, ${6:dst_dir_fd=${7:None}}})" },
		{ "trigger": "os.renames\tos.renames", "contents": "os.renames(${1:old}, ${2:new})" },
		{ "trigger": "os.replace\tos.replace", "contents": "os.replace(${1:src}, ${2:dst}${3:, ${4:src_dir_fd=${5:None}}, ${6:dst_dir_fd=${7:None}}})" },
		{ "trigger": "os.rmdir\tos.rmdir", "contents": "os.rmdir(${1:path}${2:, ${3:dir_fd=${4:None}}})" },
		{ "trigger": "os.scandir\tos.scandir", "contents": "os.scandir(${1:${2:path=${3:'.'}}})" },
		{ "trigger": "os.stat\tos.stat", "contents": "os.stat(${1:path}${2:, ${3:dir_fd=${4:None}}, ${5:follow_symlinks=${6:True}}})" },
		{ "trigger": "os.stat_float_times\tos.stat_float_times", "contents": "os.stat_float_times(${1:[ newvalue ]})" },
		{ "trigger": "os.statvfs\tos.statvfs", "contents": "os.statvfs(${1:path})" },
		{ "trigger": "os.symlink\tos.symlink", "contents": "os.symlink(${1:src}, ${2:dst}${3:, ${4:target_is_directory=${5:False}}, ${6:dir_fd=${7:None}}})" },
		{ "trigger": "os.sync\tos.sync", "contents": "os.sync()" },
		{ "trigger": "os.truncate\tos.truncate", "contents": "os.truncate(${1:path}, ${2:length})" },
		{ "trigger": "os.unlink\tos.unlink", "contents": "os.unlink(${1:path}${2:, ${3:dir_fd=${4:None}}})" },
		{ "trigger": "os.utime\tos.utime", "contents": "os.utime(${1:path}${2:, ${3:times=${4:None}}, ${4:[ ns}, ${6:dir_fd=${7:None}}, ${8:follow_symlinks=${9:True}}})" },
		{ "trigger": "os.walk\tos.walk", "contents": "os.walk(${1:top}${2:, ${3:topdown=${4:True}}, ${5:onerror=${6:None}}, ${7:followlinks=${8:False}}})" },
		{ "trigger": "os.fwalk\tos.fwalk", "contents": "os.fwalk(${1:${2:top=${3:'.'}}, ${4:topdown=${5:True}}, ${6:onerror=${7:None}}, ${8:follow_symlinks=${9:False}}, ${10:dir_fd=${11:None}}})" },
		{ "trigger": "os.getxattr\tos.getxattr", "contents": "os.getxattr(${1:path}, ${2:attribute}${3:, ${4:follow_symlinks=${5:True}}})" },
		{ "trigger": "os.listxattr\tos.listxattr", "contents": "os.listxattr(${1:${2:path=${3:None}}, ${4:follow_symlinks=${5:True}}})" },
		{ "trigger": "os.removexattr\tos.removexattr", "contents": "os.removexattr(${1:path}, ${2:attribute}${3:, ${4:follow_symlinks=${5:True}}})" },
		{ "trigger": "os.setxattr\tos.setxattr", "contents": "os.setxattr(${1:path}, ${2:attribute}, ${3:value}${4:, ${5:flags=${6:0}}, ${7:follow_symlinks=${8:True}}})" },
		{ "trigger": "os.abort\tos.abort", "contents": "os.abort()" },
		{ "trigger": "os.execl\tos.execl", "contents": "os.execl(${1:path}, ${2:arg0}, ${3:arg1}, ${4:...})" },
		{ "trigger": "os._exit\tos._exit", "contents": "os._exit(${1:n})" },
		{ "trigger": "os.fork\tos.fork", "contents": "os.fork()" },
		{ "trigger": "os.forkpty\tos.forkpty", "contents": "os.forkpty()" },
		{ "trigger": "os.kill\tos.kill", "contents": "os.kill(${1:pid}, ${2:sig})" },
		{ "trigger": "os.killpg\tos.killpg", "contents": "os.killpg(${1:pgid}, ${2:sig})" },
		{ "trigger": "os.nice\tos.nice", "contents": "os.nice(${1:increment})" },
		{ "trigger": "os.plock\tos.plock", "contents": "os.plock(${1:op})" },
		{ "trigger": "os.popen\tos.popen", "contents": "os.popen(${1:cmd}${2:, ${3:mode=${4:'r'}}, ${5:buffering=${6:-1}}})" },
		{ "trigger": "os.spawnl\tos.spawnl", "contents": "os.spawnl(${1:mode}, ${2:path}, ${3:...})" },
		{ "trigger": "os.startfile\tos.startfile", "contents": "os.startfile(${1:path [}, ${2:operation ]})" },
		{ "trigger": "os.system\tos.system", "contents": "os.system(${1:command})" },
		{ "trigger": "os.times\tos.times", "contents": "os.times()" },
		{ "trigger": "os.wait\tos.wait", "contents": "os.wait()" },
		{ "trigger": "os.waitid\tos.waitid", "contents": "os.waitid(${1:idtype}, ${2:id}, ${3:options})" },
		{ "trigger": "os.waitpid\tos.waitpid", "contents": "os.waitpid(${1:pid}, ${2:options})" },
		{ "trigger": "os.wait3\tos.wait3", "contents": "os.wait3(${1:options})" },
		{ "trigger": "os.wait4\tos.wait4", "contents": "os.wait4(${1:pid}, ${2:options})" },
		{ "trigger": "os.WCOREDUMP\tos.WCOREDUMP", "contents": "os.WCOREDUMP(${1:status})" },
		{ "trigger": "os.WIFCONTINUED\tos.WIFCONTINUED", "contents": "os.WIFCONTINUED(${1:status})" },
		{ "trigger": "os.WIFSTOPPED\tos.WIFSTOPPED", "contents": "os.WIFSTOPPED(${1:status})" },
		{ "trigger": "os.WIFSIGNALED\tos.WIFSIGNALED", "contents": "os.WIFSIGNALED(${1:status})" },
		{ "trigger": "os.WIFEXITED\tos.WIFEXITED", "contents": "os.WIFEXITED(${1:status})" },
		{ "trigger": "os.WEXITSTATUS\tos.WEXITSTATUS", "contents": "os.WEXITSTATUS(${1:status})" },
		{ "trigger": "os.WSTOPSIG\tos.WSTOPSIG", "contents": "os.WSTOPSIG(${1:status})" },
		{ "trigger": "os.WTERMSIG\tos.WTERMSIG", "contents": "os.WTERMSIG(${1:status})" },
		{ "trigger": "os.sched_get_priority_min\tos.sched_get_priority_min", "contents": "os.sched_get_priority_min(${1:policy})" },
		{ "trigger": "os.sched_get_priority_max\tos.sched_get_priority_max", "contents": "os.sched_get_priority_max(${1:policy})" },
		{ "trigger": "os.sched_setscheduler\tos.sched_setscheduler", "contents": "os.sched_setscheduler(${1:pid}, ${2:policy}, ${3:param})" },
		{ "trigger": "os.sched_getscheduler\tos.sched_getscheduler", "contents": "os.sched_getscheduler(${1:pid})" },
		{ "trigger": "os.sched_setparam\tos.sched_setparam", "contents": "os.sched_setparam(${1:pid}, ${2:param})" },
		{ "trigger": "os.sched_getparam\tos.sched_getparam", "contents": "os.sched_getparam(${1:pid})" },
		{ "trigger": "os.sched_rr_get_interval\tos.sched_rr_get_interval", "contents": "os.sched_rr_get_interval(${1:pid})" },
		{ "trigger": "os.sched_yield\tos.sched_yield", "contents": "os.sched_yield()" },
		{ "trigger": "os.sched_setaffinity\tos.sched_setaffinity", "contents": "os.sched_setaffinity(${1:pid}, ${2:mask})" },
		{ "trigger": "os.sched_getaffinity\tos.sched_getaffinity", "contents": "os.sched_getaffinity(${1:pid})" },
		{ "trigger": "os.confstr\tos.confstr", "contents": "os.confstr(${1:name})" },
		{ "trigger": "os.cpu_count\tos.cpu_count", "contents": "os.cpu_count()" },
		{ "trigger": "os.getloadavg\tos.getloadavg", "contents": "os.getloadavg()" },
		{ "trigger": "os.sysconf\tos.sysconf", "contents": "os.sysconf(${1:name})" },
		{ "trigger": "os.urandom\tos.urandom", "contents": "os.urandom(${1:n})" },
		{ "trigger": "os.path.abspath\tos.path.abspath", "contents": "os.path.abspath(${1:path})" },
		{ "trigger": "os.path.basename\tos.path.basename", "contents": "os.path.basename(${1:path})" },
		{ "trigger": "os.path.commonpath\tos.path.commonpath", "contents": "os.path.commonpath(${1:paths})" },
		{ "trigger": "os.path.commonprefix\tos.path.commonprefix", "contents": "os.path.commonprefix(${1:list})" },
		{ "trigger": "os.path.dirname\tos.path.dirname", "contents": "os.path.dirname(${1:path})" },
		{ "trigger": "os.path.exists\tos.path.exists", "contents": "os.path.exists(${1:path})" },
		{ "trigger": "os.path.lexists\tos.path.lexists", "contents": "os.path.lexists(${1:path})" },
		{ "trigger": "os.path.expanduser\tos.path.expanduser", "contents": "os.path.expanduser(${1:path})" },
		{ "trigger": "os.path.expandvars\tos.path.expandvars", "contents": "os.path.expandvars(${1:path})" },
		{ "trigger": "os.path.getatime\tos.path.getatime", "contents": "os.path.getatime(${1:path})" },
		{ "trigger": "os.path.getmtime\tos.path.getmtime", "contents": "os.path.getmtime(${1:path})" },
		{ "trigger": "os.path.getctime\tos.path.getctime", "contents": "os.path.getctime(${1:path})" },
		{ "trigger": "os.path.getsize\tos.path.getsize", "contents": "os.path.getsize(${1:path})" },
		{ "trigger": "os.path.isabs\tos.path.isabs", "contents": "os.path.isabs(${1:path})" },
		{ "trigger": "os.path.isfile\tos.path.isfile", "contents": "os.path.isfile(${1:path})" },
		{ "trigger": "os.path.isdir\tos.path.isdir", "contents": "os.path.isdir(${1:path})" },
		{ "trigger": "os.path.islink\tos.path.islink", "contents": "os.path.islink(${1:path})" },
		{ "trigger": "os.path.ismount\tos.path.ismount", "contents": "os.path.ismount(${1:path})" },
		{ "trigger": "os.path.join\tos.path.join", "contents": "os.path.join(${1:path}, ${2:*paths})" },
		{ "trigger": "os.path.normcase\tos.path.normcase", "contents": "os.path.normcase(${1:path})" },
		{ "trigger": "os.path.normpath\tos.path.normpath", "contents": "os.path.normpath(${1:path})" },
		{ "trigger": "os.path.realpath\tos.path.realpath", "contents": "os.path.realpath(${1:path})" },
		{ "trigger": "os.path.relpath\tos.path.relpath", "contents": "os.path.relpath(${1:path}${2:, ${3:start=${4:os.curdir}}})" },
		{ "trigger": "os.path.samefile\tos.path.samefile", "contents": "os.path.samefile(${1:path1}, ${2:path2})" },
		{ "trigger": "os.path.sameopenfile\tos.path.sameopenfile", "contents": "os.path.sameopenfile(${1:fp1}, ${2:fp2})" },
		{ "trigger": "os.path.samestat\tos.path.samestat", "contents": "os.path.samestat(${1:stat1}, ${2:stat2})" },
		{ "trigger": "os.path.split\tos.path.split", "contents": "os.path.split(${1:path})" },
		{ "trigger": "os.path.splitdrive\tos.path.splitdrive", "contents": "os.path.splitdrive(${1:path})" },
		{ "trigger": "os.path.splitext\tos.path.splitext", "contents": "os.path.splitext(${1:path})" },
		{ "trigger": "os.path.splitunc\tos.path.splitunc", "contents": "os.path.splitunc(${1:path})" },
		{ "trigger": "re.compile\tre.compile", "contents": "re.compile(${1:pattern}${2:, ${3:flags=${4:0}}})" },
		{ "trigger": "re.search\tre.search", "contents": "re.search(${1:pattern}, ${2:string}${3:, ${4:flags=${5:0}}})" },
		{ "trigger": "re.match\tre.match", "contents": "re.match(${1:pattern}, ${2:string}${3:, ${4:flags=${5:0}}})" },
		{ "trigger": "re.fullmatch\tre.fullmatch", "contents": "re.fullmatch(${1:pattern}, ${2:string}${3:, ${4:flags=${5:0}}})" },
		{ "trigger": "re.split\tre.split", "contents": "re.split(${1:pattern}, ${2:string}${3:, ${4:maxsplit=${5:0}}, ${6:flags=${7:0}}})" },
		{ "trigger": "re.findall\tre.findall", "contents": "re.findall(${1:pattern}, ${2:string}${3:, ${4:flags=${5:0}}})" },
		{ "trigger": "re.finditer\tre.finditer", "contents": "re.finditer(${1:pattern}, ${2:string}${3:, ${4:flags=${5:0}}})" },
		{ "trigger": "re.sub\tre.sub", "contents": "re.sub(${1:pattern}, ${2:repl}, ${3:string}${4:, ${5:count=${6:0}}, ${7:flags=${8:0}}})" },
		{ "trigger": "re.subn\tre.subn", "contents": "re.subn(${1:pattern}, ${2:repl}, ${3:string}${4:, ${5:count=${6:0}}, ${7:flags=${8:0}}})" },
		{ "trigger": "re.escape\tre.escape", "contents": "re.escape(${1:string})" },
		{ "trigger": "re.purge\tre.purge", "contents": "re.purge()" },
		{ "trigger": "math.ceil\tmath.ceil", "contents": "math.ceil(${1:x})" },
		{ "trigger": "math.copysign\tmath.copysign", "contents": "math.copysign(${1:x}, ${2:y})" },
		{ "trigger": "math.fabs\tmath.fabs", "contents": "math.fabs(${1:x})" },
		{ "trigger": "math.factorial\tmath.factorial", "contents": "math.factorial(${1:x})" },
		{ "trigger": "math.floor\tmath.floor", "contents": "math.floor(${1:x})" },
		{ "trigger": "math.fmod\tmath.fmod", "contents": "math.fmod(${1:x}, ${2:y})" },
		{ "trigger": "math.frexp\tmath.frexp", "contents": "math.frexp(${1:x})" },
		{ "trigger": "math.fsum\tmath.fsum", "contents": "math.fsum(${1:iterable})" },
		{ "trigger": "math.gcd\tmath.gcd", "contents": "math.gcd(${1:a}, ${2:b})" },
		{ "trigger": "math.isclose\tmath.isclose", "contents": "math.isclose(${1:a}, ${2:b}${3:, ${4:rel_tol=${5:1e-09}}, ${6:abs_tol=${7:0.0}}})" },
		{ "trigger": "math.isfinite\tmath.isfinite", "contents": "math.isfinite(${1:x})" },
		{ "trigger": "math.isinf\tmath.isinf", "contents": "math.isinf(${1:x})" },
		{ "trigger": "math.isnan\tmath.isnan", "contents": "math.isnan(${1:x})" },
		{ "trigger": "math.ldexp\tmath.ldexp", "contents": "math.ldexp(${1:x}, ${2:i})" },
		{ "trigger": "math.modf\tmath.modf", "contents": "math.modf(${1:x})" },
		{ "trigger": "math.trunc\tmath.trunc", "contents": "math.trunc(${1:x})" },
		{ "trigger": "math.exp\tmath.exp", "contents": "math.exp(${1:x})" },
		{ "trigger": "math.expm1\tmath.expm1", "contents": "math.expm1(${1:x})" },
		{ "trigger": "math.log\tmath.log", "contents": "math.log(${1:x [}, ${2:base ]})" },
		{ "trigger": "math.log1p\tmath.log1p", "contents": "math.log1p(${1:x})" },
		{ "trigger": "math.log2\tmath.log2", "contents": "math.log2(${1:x})" },
		{ "trigger": "math.log10\tmath.log10", "contents": "math.log10(${1:x})" },
		{ "trigger": "math.pow\tmath.pow", "contents": "math.pow(${1:x}, ${2:y})" },
		{ "trigger": "math.sqrt\tmath.sqrt", "contents": "math.sqrt(${1:x})" },
		{ "trigger": "math.acos\tmath.acos", "contents": "math.acos(${1:x})" },
		{ "trigger": "math.asin\tmath.asin", "contents": "math.asin(${1:x})" },
		{ "trigger": "math.atan\tmath.atan", "contents": "math.atan(${1:x})" },
		{ "trigger": "math.atan2\tmath.atan2", "contents": "math.atan2(${1:y}, ${2:x})" },
		{ "trigger": "math.cos\tmath.cos", "contents": "math.cos(${1:x})" },
		{ "trigger": "math.hypot\tmath.hypot", "contents": "math.hypot(${1:x}, ${2:y})" },
		{ "trigger": "math.sin\tmath.sin", "contents": "math.sin(${1:x})" },
		{ "trigger": "math.tan\tmath.tan", "contents": "math.tan(${1:x})" },
		{ "trigger": "math.degrees\tmath.degrees", "contents": "math.degrees(${1:x})" },
		{ "trigger": "math.radians\tmath.radians", "contents": "math.radians(${1:x})" },
		{ "trigger": "math.acosh\tmath.acosh", "contents": "math.acosh(${1:x})" },
		{ "trigger": "math.asinh\tmath.asinh", "contents": "math.asinh(${1:x})" },
		{ "trigger": "math.atanh\tmath.atanh", "contents": "math.atanh(${1:x})" },
		{ "trigger": "math.cosh\tmath.cosh", "contents": "math.cosh(${1:x})" },
		{ "trigger": "math.sinh\tmath.sinh", "contents": "math.sinh(${1:x})" },
		{ "trigger": "math.tanh\tmath.tanh", "contents": "math.tanh(${1:x})" },
		{ "trigger": "math.erf\tmath.erf", "contents": "math.erf(${1:x})" },
		{ "trigger": "math.erfc\tmath.erfc", "contents": "math.erfc(${1:x})" },
		{ "trigger": "math.gamma\tmath.gamma", "contents": "math.gamma(${1:x})" },
		{ "trigger": "math.lgamma\tmath.lgamma", "contents": "math.lgamma(${1:x})" },
	]
}