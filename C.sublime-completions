{
	"scope": "source.c, source.objc, source.c++, source.objc++",

	"completions":
	[
		{ "trigger": "isalnum\tisalnum", "contents": "isalnum(${1:int c})" },
		{ "trigger": "isalpha\tisalpha", "contents": "isalpha(${1:int c})" },
		{ "trigger": "isblank\tisblank", "contents": "isblank(${1:int c})" },
		{ "trigger": "iscntrl\tiscntrl", "contents": "iscntrl(${1:int c})" },
		{ "trigger": "isdigit\tisdigit", "contents": "isdigit(${1:int c})" },
		{ "trigger": "islower\tislower", "contents": "islower(${1:int c})" },
		{ "trigger": "tolower\ttolower", "contents": "tolower(${1:int c})" },
		{ "trigger": "isupper\tisupper", "contents": "isupper(${1:int c})" },
		{ "trigger": "toupper\ttoupper", "contents": "toupper(${1:int c})" },
		{ "trigger": "isspace\tisspace", "contents": "isspace(${1:int c})" },
		{ "trigger": "isprint\tisprint", "contents": "isprint(${1:int c})" },
		{ "trigger": "exp\tpow(e, x)", "contents": "exp()" },
		{ "trigger": "log\tbase e", "contents": "log(${1:double x})" },
		{ "trigger": "log10\tlog10", "contents": "log10(${1:double x})" },
		{ "trigger": "log2\tlog2", "contents": "log2(${1:double x})" },
		{ "trigger": "pow\tpow", "contents": "pow(${1:base}, ${2:exponent})" },
		{ "trigger": "sqrt\tsqrt", "contents": "sqrt(${1:double x})" },
		{ "trigger": "ceil\tceil", "contents": "ceil(${1:double x})" },
		{ "trigger": "floor\tfloor", "contents": "floor(${1:double x})" },
		{ "trigger": "round\tround", "contents": "round(${1:double x})" },
		{ "trigger": "abs\tint abs", "contents": "abs(${1:int x})" },
		{ "trigger": "fabs\tdouble abs", "contents": "fabs(${1:double x})" },
		{ "trigger": "modf\treturn fraction part", "contents": "modf(${1:double param}, ${2:double *intpart})" },
		{ "trigger": "max\tmax", "contents": "max(${1:int x}, ${2:int y})" },
		{ "trigger": "min\tmin", "contents": "min(${1:int x}, ${2:int y})" },
		{ "trigger": "fmax\tfmax", "contents": "fmax(${1:double x}, ${2:double y})" },
		{ "trigger": "fmin\tfmin", "contents": "fmin(${1:double x}, ${2:double y})" },
		{ "trigger": "cos\tcos", "contents": "cos(${1:x})" },
		{ "trigger": "sin\tsin", "contents": "sin(${1:x})" },
		{ "trigger": "tan\ttan", "contents": "tan(${1:x})" },
		{ "trigger": "acos\tacos", "contents": "acos(${1:x})" },
		{ "trigger": "asin\tasin", "contents": "asin(${1:x})" },
		{ "trigger": "atan\tatan", "contents": "atan(${1:x})" },
		{ "trigger": "fscanf\tfscanf", "contents": "fscanf(${1:FILE *stream}, ${2:char *format}, ${3:...})" },
		{ "trigger": "sprintf\tsprintf", "contents": "sprintf(${1:char *str}, ${2:const char *format}, ${3:...})" },
		{ "trigger": "snprintf\tchar str[n]", "contents": "snprintf(${1:char *str}, ${2:size_t n}, ${3:char *format}, ${4:...})" },
		{ "trigger": "sscanf\tsscanf", "contents": "sscanf(${1:char *str}, ${2:char *format}, ${3:...})" },
		{ "trigger": "fgetc\tfgetc", "contents": "fgetc(${1:FILE *stream})" },
		{ "trigger": "fgets\tfgets", "contents": "fgets(${1:char *str}, ${2:int str_size}, ${3:FILE *stream})" },
		{ "trigger": "fputc\tfputc", "contents": "fputc(${1:int character}, ${2:FILE *stream})" },
		{ "trigger": "fputs\tfputs", "contents": "fputs(${1:char *str}, ${2:FILE *stream})" },
		{ "trigger": "putchar\tputchar", "contents": "putchar(${1:int character})" },
		{ "trigger": "fopen\tfopen", "contents": "fopen(${1:file_name}, ${2:mode})" },
		{ "trigger": "fclose\tfclose", "contents": "fclose(${1:FILE *stream})" },
		{ "trigger": "fread\tfread", "contents": "fread(${1:void *ptr}, ${2:data_size}, ${3:data_count}, ${4:FILE *stream})" },
		{ "trigger": "fwrite\tfwrite", "contents": "fwrite(${1:void *ptr}, ${2:data_size}, ${3:data_count}, ${4:FILE *stream})" },
		{ "trigger": "fseek\tfseek", "contents": "fseek(${1:FILE *stream}, ${2:offset}, ${3:origin})" },
		{ "trigger": "ftell\tftell", "contents": "ftell(${1:FILE *stream})" },
		{ "trigger": "rewind\trewind", "contents": "rewind(${1:FILE *stream})" },
		{ "trigger": "freopen\tfreopen", "contents": "freopen(${1:char *file_name_src}, ${2:mode}, ${3:FILE *file_dest})" },
		{ "trigger": "remove\tremove", "contents": "remove(${1:char *path})" },
		{ "trigger": "rename\trename", "contents": "rename(${1:char *old_path}, ${2:char *new_path})" },
		{ "trigger": "tmpfile\treturn FILE *", "contents": "tmpfile()" },
		{ "trigger": "tmpnam\treturn char *", "contents": "tmpnam(${1:char *buffer[L_tmpnam]})" },
		{ "trigger": "atof\tatof", "contents": "atof(${1:str})" },
		{ "trigger": "atoi\tatoi", "contents": "atoi(${1:str})" },
		{ "trigger": "calloc\tcalloc", "contents": "calloc(${1:data_count}, ${2:data_size})" },
		{ "trigger": "malloc\tmalloc", "contents": "malloc(${1:size})" },
		{ "trigger": "free\tfree", "contents": "free(${1:ptr})" },
		{ "trigger": "realloc\trealloc", "contents": "realloc(${1:ptr}, ${2:new_size})" },
		{ "trigger": "exit\texit", "contents": "exit(${1:int code})" },
		{ "trigger": "sizeof\tsizeof", "contents": "sizeof(${1:type})" },
		{ "trigger": "qsort\tqsort", "contents": "qsort(${1:void *array}, ${2:size_t data_count}, ${3:size_t data_size}, ${4:int func_compar})" },
		{ "trigger": "bsearch\tbsearch", "contents": "bsearch(${1:void *key}, ${2:void *array}, ${3:size_t data_count}, ${4:size_t data_size}, ${5:int func_compar})" },
		{ "trigger": "rand\trand", "contents": "rand()" },
		{ "trigger": "srand\tsrand", "contents": "srand(${1:seed})" },
		{ "trigger": "strcpy\tstrcpy", "contents": "strcpy(${1:dest}, ${2:src})" },
		{ "trigger": "strncpy\tstring[n]", "contents": "strncpy(${1:dest}, ${2:src}, ${3:n})" },
		{ "trigger": "strcat\tstrcat", "contents": "strcat(${1:dest}, ${2:src})" },
		{ "trigger": "strncat\tn = strlen(src)", "contents": "strncat()" },
		{ "trigger": "strcmp\tstrcmp", "contents": "strcmp(${1:str1}, ${2:str2})" },
		{ "trigger": "strchr\tstrchr", "contents": "strchr(${1:str}, ${2:int character})" },
		{ "trigger": "strpbrk\tstrpbrk", "contents": "strpbrk(${1:src}, ${2:char *key})" },
		{ "trigger": "strspn\tstrspn", "contents": "strspn(${1:src}, ${2:char *key})" },
		{ "trigger": "strstr\tstrstr", "contents": "strstr(${1:str}, ${2:char *key})" },
		{ "trigger": "strtok\tstrtok", "contents": "strtok(${1:str}, ${2:char *delimiters})" },
		{ "trigger": "strlen\tstrlen", "contents": "strlen(${1:str})" },
		{ "trigger": "memcpy\tmemcpy", "contents": "memcpy(${1:void *dest}, ${2:void *src}, ${3:size_t num})" },
		{ "trigger": "memmove\tmemmove", "contents": "memmove(${1:void *dest}, ${2:void *src}, ${3:size_t num})" },
		{ "trigger": "memcmp\tmemcmp", "contents": "memcmp(${1:void *ptr1}, ${2:void *ptr2}, ${3:size_t num})" },
		{ "trigger": "memchr\treturn void *", "contents": "memchr(${1:void *ptr}, ${2:int value}, ${3:size_t num})" },
		{ "trigger": "memset\tmemset", "contents": "memset(${1:void *ptr}, ${2:int value}, ${3:size_t num})" },
		{ "trigger": "time\ttime", "contents": "time(${1:NULL})" },
		{ "trigger": "clocks_per_sec\tclocks_per_sec", "contents": "CLOCKS_PER_SEC" },
		{ "trigger": "null\tnull", "contents": "NULL" },

	]
}